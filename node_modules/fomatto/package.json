{
  "name": "fomatto",
  "version": "0.6.0",
  "description": "Lightweight JavaScript String Interpolation.",
  "homepage": "https://github.com/BonsaiDen/fomatto",
  "author": {
    "name": "Ivo Wetzel",
    "email": "ivo.wetzel@googlemail.com"
  },
  "keywords": [
    "string",
    "interpolation",
    "formatting"
  ],
  "engines": {
    "node": ">=0.1.5"
  },
  "main": "./lib/fomatto",
  "repository": {
    "type": "git",
    "url": "http://github.com/BonsaiDen/fomatto.git"
  },
  "bugs": {
    "url": "http://github.com/BonsaiDen/fomatto/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/BonsaiDen/fomatto/raw/master/LICENSE"
    }
  ],
  "readme": "Fōmatto - Japanese for Format\n=============================\n\nFōmatto provides leightweight string interpolation and formatting for\nJavaScript.\n\nThe library brings with it the `Formatter` factory and the `FormatError`.\n\n# Usage\n    \nIn order to use Fōmatto it is necessary to create a `format` function with the \n`Formatter` factory.\n\n    Formatter([formats])\n\n### The `format` function\n\n```javascript\n    format(template, arg1[, arg2, arg3, ...argN])\n```\n\nThe `format` function takes a **template** and either  **multiple arguments**, \nan **array** or **array like object** (an object with a `length` property of type\n`Number`) or a standard **object** as its arguments. \n\n```javascript\n    > format('Good {} Sir {}.', 'morning', 'Lancelot')\n    'Good morning Sir Lancelot.'\n\n    > format('Good {0} Sir {1}.', 'morning', 'Lancelot')\n    'Good morning Sir Lancelot.'\n\n    > format('Good {time} Sir {name}.', 'morning', 'Lancelot')\n    'Good morning Sir Lancelot.'\n\n    > format('Good {0} Sir {1}.', ['morning', 'Lancelot'])\n    'Good morning Sir Lancelot.'\n\n    > format('Good {time} Sir {name}.', {time: 'morning', name: 'Lancelot'})\n    'Good morning Sir Lancelot.'\n\n    > format('Good {0} Sir {1}.', {0: 'morning', 1: 'Lancelot', length: 2})\n    'Good morning Sir Lancelot.'\n```\n\n### Templates\n\nString templates contain placeholders wrapped in `{}`. There are a number of\ndifferent ways in which these placeholders can be used to insert data into a\ntemplate.\n\n - Auto indexes via `{}`, these automatically insert the **next item** from an \n   array or a list of arguments.\n\n - Positive `{1}` or negative `{-1}` indexes, these will insert the **Nth** or \n   **length + Nth** index of an array or a list of arguments.\n\n - Property access via `{name}`, these will either insert the corresponding\n   **property of an object** or behave like auto indexes in case of an array or \n   a list of arguments.\n\n - Complex property access via `{users.names[2]['first']}`, these will query an\n   **object** for the specified property and throw a `FormatError` in case the \n   property could not be resolved.\n\n# Formats\n\nBy appending a semicolon at the end of a placeholder it is possible to apply a\nformatting function to the value before it is inserted.\n\n```javascript\n    > format('{0:upper}!', 'banana')\n    'BANANA!'\n\n    > format('Some fruits: {:join(', ')}!', ['melons', 'oranges', 'strawberries'])\n    'Some fruits: melons, oranges, strawberries!'\n```\n\n### Standard formats\n    \n- `upper` will transform to UPPER case.\n- `lower` will transform to lower case.\n- `lpad(count [, padding=' '])` will pad to `count` characters on the left side.\n- `rpad(count [, padding=' '])` will pad to `count` characters on the right side.\n- `pad(count [, padding=' '])` will equally pad to `count` characters on both sides.\n\n> **Note:** The `pad` formats only support single characters for padding.\n\n- `surround(left=' ' [, right=left])` will surround with `left` and `right`.\n- `repeat(count=0)` will repeat `count` times.\n- `join([character=' '])` will join an array with `character`.\n- `hex([leading=false])` will convert to hexadecimal representation. If leading\n  is true `0x` will be prepended.\n\n- `bin([leading=false])` will convert to binary representation. If leading\n  is true `0b` will be prepended.                                     \n\n### Custom formats\n\nUsing the `Formatter` factory one can add their own formatters.\n\n```javascript\n    var custom = Formatter({\n        unicorns: function(value) {\n            return value + ' unicorns!';\n        }\n    });\n\n    > custom('Here come the {:unicorns}', 'five')\n    'Here come the five unicorns!'\n```\n\nIt is also possible to add more formats later on by setting properties on the\n`formats` object of a `format` function.\n\n```javascript\n    custom.formats.foo = function(value) {\n        return 'foo';\n    };\n```\n\nThis will add the format `:foo`.\n\n### Adding default formats\n\nBy extending `Formatter.formats` it's also possible to add more default\nformats.\n\n```javascript\n    Formatter.formats.bonsai = function(value) {\n        // ...   \n    };\n```\n\nThe format `:bonsai` will now be available to all `format` functions.\n\n",
  "readmeFilename": "README.md",
  "_id": "fomatto@0.6.0",
  "dist": {
    "shasum": "f7e0b57538975fcd95a404a5c79a9a727c2d9625"
  },
  "_resolved": "git://github.com/BonsaiDen/Fomatto#468666f600b46f9067e3da7200fd9df428923ea6",
  "_from": "git://github.com/BonsaiDen/Fomatto",
  "_fromGithub": true
}
